---
layout: post
title:      "Adding jQuery to My Rails Project"
date:       2018-06-23 15:41:54 +0000
permalink:  adding_jquery_to_my_rails_project
---


Javascript in general was a pain for me in the beginning. Shifting from learning Ruby and MVC framework, which felt wonderfully intuitive and elegant to me, I suddently felt confused and lost, specifically with manipulating the DOM. I struggled to wrap my head around XHR requests and what AJAX actually was. Determined not to let this section get the best of me, I started re-reading the early Javascript lessons and attending the study groups. Getting this extra exposure to the material, it all finally started to sink in. And as I got into the later API lessons and started to see how Javascript fit into the MVC framework I had grown so familiar with, I finally started to feel like I was getting a handle on Javascript and jQuery. The requirements for the Rails with jQuery lessons went from Greek to something that actually seemed pretty straightforward and simple.

For my project, setting up my assest pipeline and adding jQuery to the index and show pages went pretty smoothly. That said, the first moment I saw my code added to the DOM without a refresh, my heart started pounding. I could finally execute Javascript with relative ease after wrestling so much with the concepts. Not only had I set up my files correctly, I also got my jQuery to work. It was a really exciting accomplishment for me.

I was stumped for a moment with the has-many relationship requirement. I remembered seeing but couldn't find the right lesson for the life of me. Luckily it finally dawned on me that this was one of the major points of using the Active Model Serializers and I was able to go back through the lesson to refresh myself on how to set-up the relationships. I was nervous at first because I had set-up my category model as a nested resource in the goal model where the user could choose or add a new category. I was worried if this would make it difficult for the AMS to integrate with my code, but it actually worked completely seemlessly, which was exciting. 

The one hiccup I hit with using the AMS gem was fetching the category name. Initially I was getting the id number, so I knew the serializer was set-up in a way where it was seeing the relationship, I just wasn't accessing it the way I needed to be. I thought for a moment that I could use the id to grab the name by using the Category class find method but I learned my Javascript file had no idea what I was asking it to look for. I searched for a bit to see if there was a successful way to execute this, but after not finding anything, decided to look for a different way. (I'm still curious to know if there's a way that I could have made this work.) Next, I worked on figuring out how to make sure the name is included in the response. I did some searching but nothing really came up. I wondered if the name was just hidden deeply somewhere in my JSON response and searched through it for a while with no results. I decided to ask in the Slack channel and luckily Cernan responded right away suggesting I use the JSON adapter instead and this worked, which was another exciting moment.  

The final requirement, where we had to "translate the JSON responses into Javascript Model Objects" where "the Model Objects must have at least one method on the prototype", had me a little confused at first as well. I struggled to wrap my head around where I would actually execute this in my code, but luckily the requirement offered a clear suggestion which I was able to at least know where I would use the model object. The next part was understanding how to actually execute it. I refreshed myself on the concept by re-reading the lessons on Javascript objects but still wondered where I would actually put my object and how to call it. I tried to search for some examples and looked in the past labs, but couldn't find anything that specifcally showed an example involving jQuery and JSON. I was left to try using common sense and making an educated guess. I figured the class would be placed in the same goal.js file I had been working from and that I created a new class object in a place where it would have access to the attributes it needed. I was pretty excited when this actually worked. Next I just had to create a protoype method to format the new goal content on the page. This seemed like it would be tricky but actually came together pretty easily using debugger to see what was being sent and figuring out how to display it. I could see where all my hours of debugging experience allowed me to figure out what I was doing wrong within 20 minutes instead of becoming something that could have taken me all day.

Overall, as difficult as it was getting to the point where I could execute jQuery correctly, once I figured it out, it all came together pretty easily. I'm really thankful I kept moving forward even though I struggled so much and hit a wall in the beginning. It's a great reminder that every new concept has a learning curve. Sometimes navigating through that curve can become extremely difficult and frustrating, but if you keep trying you'll come out understanding the material and being able to use it easily. It feels good knowing I have a new tool in my toolbox now and am about to move into my final project!
